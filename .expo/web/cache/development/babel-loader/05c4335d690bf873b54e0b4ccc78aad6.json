{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"text\", \"style\", \"textStyle\", \"outline\", \"color\", \"inverseColor\", \"size\", \"outlineWidth\", \"disabled\", \"leftContent\", \"rightContent\", \"status\", \"width\"];\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\maste\\\\Desktop\\\\Version2\\\\CODE_EXP-project\\\\node_modules\\\\react-native-rapi-ui\\\\components\\\\Button\\\\Button.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text } from \"../Text\";\nimport { themeColor, component } from \"../../constants/colors\";\nimport { useTheme } from \"../../provider/ThemeProvider\";\nvar sizeProp;\n\n(function (sizeProp) {\n  sizeProp[sizeProp[\"sm\"] = 0] = \"sm\";\n  sizeProp[sizeProp[\"md\"] = 1] = \"md\";\n  sizeProp[sizeProp[\"lg\"] = 2] = \"lg\";\n})(sizeProp || (sizeProp = {}));\n\nvar type = {\n  TouchableOpacity: \"TouchableOpacity\",\n  TouchableWithoutFeedback: \"TouchableWithoutFeedback\",\n  TouchableHighlight: \"TouchableHighlight\"\n};\nvar parentStyle = {\n  buttonColor: themeColor.primary,\n  buttonInverseColor: themeColor.white,\n  outlineWidth: 2\n};\nvar styles = {\n  lg: _objectSpread(_objectSpread({}, parentStyle), {}, {\n    buttonBorderRadius: 8,\n    buttonPaddingVertical: 12.5,\n    buttonPaddingHorizontal: 15,\n    textSize: \"lg\"\n  }),\n  md: _objectSpread(_objectSpread({}, parentStyle), {}, {\n    buttonBorderRadius: 8,\n    buttonPaddingVertical: 10,\n    buttonPaddingHorizontal: 12.5,\n    textSize: \"md\"\n  }),\n  sm: _objectSpread(_objectSpread({}, parentStyle), {}, {\n    buttonBorderRadius: 8,\n    buttonPaddingVertical: 7.5,\n    buttonPaddingHorizontal: 12.5,\n    textSize: \"sm\"\n  })\n};\n\nvar ButtonContent = function ButtonContent(props) {\n  var text = props.text,\n      textStyle = props.textStyle,\n      outline = props.outline,\n      size = props.size,\n      leftContent = props.leftContent,\n      rightContent = props.rightContent,\n      selectedColor = props.selectedColor,\n      selectedInverseColor = props.selectedInverseColor,\n      disabled = props.disabled;\n\n  var _useTheme = useTheme(),\n      theme = _useTheme.theme;\n\n  return React.createElement(React.Fragment, null, leftContent, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, textStyle), {}, {\n      color: textStyle != null && textStyle.color ? textStyle == null ? void 0 : textStyle.color : outline ? selectedColor : disabled ? component[theme].button.disabledTextColor : selectedInverseColor,\n      marginLeft: textStyle != null && textStyle.marginLeft ? textStyle == null ? void 0 : textStyle.marginLeft : leftContent ? 5 : 0,\n      marginRight: textStyle != null && textStyle.marginRight ? textStyle == null ? void 0 : textStyle.marginRight : rightContent ? 5 : 0\n    }),\n    fontWeight: \"bold\",\n    size: size,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }, text), rightContent);\n};\n\nvar Button = function Button(props) {\n  var text = props.text,\n      style = props.style,\n      textStyle = props.textStyle,\n      outline = props.outline,\n      color = props.color,\n      inverseColor = props.inverseColor,\n      size = props.size,\n      outlineWidth = props.outlineWidth,\n      disabled = props.disabled,\n      leftContent = props.leftContent,\n      rightContent = props.rightContent,\n      status = props.status,\n      width = props.width,\n      buttonProp = _objectWithoutProperties(props, _excluded);\n\n  var _useTheme2 = useTheme(),\n      theme = _useTheme2.theme;\n\n  var selectedColor = disabled ? component[theme].button.disabledColor : color ? color : status ? themeColor[status] : styles[size || \"lg\"].buttonColor;\n  var selectedInverseColor = inverseColor ? inverseColor : status ? themeColor.white : styles[size || \"lg\"].buttonInverseColor;\n  var containerStyle = outline ? {\n    borderWidth: outlineWidth || styles[size || \"lg\"].outlineWidth,\n    backgroundColor: outline ? \"transparent\" : selectedInverseColor,\n    borderColor: selectedColor\n  } : {\n    backgroundColor: selectedColor\n  };\n  var paddingHorizontal = (style == null ? void 0 : style.paddingHorizontal) || styles[size || \"lg\"].buttonPaddingHorizontal;\n  var paddingVertical = outline ? styles[size || \"lg\"].buttonPaddingVertical - styles[size || \"lg\"].outlineWidth : (style == null ? void 0 : style.paddingVertical) || styles[size || \"lg\"].buttonPaddingVertical;\n  var borderRadius = (style == null ? void 0 : style.borderRadius) || styles[size || \"lg\"].buttonBorderRadius;\n\n  if (props.type === \"TouchableWithoutFeedback\") {\n    return React.createElement(TouchableWithoutFeedback, _extends({}, buttonProp, {\n      disabled: disabled,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 7\n      }\n    }), React.createElement(View, {\n      style: _objectSpread(_objectSpread(_objectSpread({}, style), containerStyle), {}, {\n        width: width,\n        flexDirection: \"row\",\n        paddingHorizontal: paddingHorizontal,\n        paddingVertical: paddingVertical,\n        borderRadius: borderRadius,\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }\n    }, React.createElement(ButtonContent, _extends({}, props, {\n      selectedColor: selectedColor,\n      selectedInverseColor: selectedInverseColor,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n  if (props.type === \"TouchableHighlight\") {\n    return React.createElement(TouchableHighlight, _extends({}, buttonProp, {\n      disabled: disabled,\n      style: _objectSpread(_objectSpread(_objectSpread({}, style), containerStyle), {}, {\n        width: width,\n        flexDirection: \"row\",\n        paddingHorizontal: paddingHorizontal,\n        paddingVertical: paddingVertical,\n        borderRadius: borderRadius,\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 7\n      }\n    }), React.createElement(ButtonContent, _extends({}, props, {\n      selectedColor: selectedColor,\n      selectedInverseColor: selectedInverseColor,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }\n    })));\n  }\n\n  return React.createElement(TouchableOpacity, _extends({}, buttonProp, {\n    disabled: disabled,\n    style: _objectSpread(_objectSpread(_objectSpread({}, style), containerStyle), {}, {\n      width: width,\n      flexDirection: \"row\",\n      paddingHorizontal: paddingHorizontal,\n      paddingVertical: paddingVertical,\n      borderRadius: borderRadius,\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 5\n    }\n  }), React.createElement(ButtonContent, _extends({}, props, {\n    selectedColor: selectedColor,\n    selectedInverseColor: selectedInverseColor,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }\n  })));\n};\n\nexport default Button;","map":{"version":3,"sources":["C:/Users/maste/Desktop/Version2/CODE_EXP-project/node_modules/react-native-rapi-ui/components/Button/Button.tsx"],"names":["React","Text","themeColor","component","useTheme","sizeProp","type","TouchableOpacity","TouchableWithoutFeedback","TouchableHighlight","parentStyle","buttonColor","primary","buttonInverseColor","white","outlineWidth","styles","lg","buttonBorderRadius","buttonPaddingVertical","buttonPaddingHorizontal","textSize","md","sm","ButtonContent","props","text","textStyle","outline","size","leftContent","rightContent","selectedColor","selectedInverseColor","disabled","theme","color","button","disabledTextColor","marginLeft","marginRight","Button","style","inverseColor","status","width","buttonProp","disabledColor","containerStyle","borderWidth","backgroundColor","borderColor","paddingHorizontal","paddingVertical","borderRadius","flexDirection","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  TouchableOpacity,\r\n  TouchableHighlight,\r\n  TouchableWithoutFeedback,\r\n  ViewStyle,\r\n  TouchableWithoutFeedbackProps,\r\n  TextStyle,\r\n  View,\r\n} from \"react-native\";\r\nimport { Text } from \"../Text\";\r\nimport { themeColor, component } from \"../../constants/colors\";\r\nimport { useTheme } from \"../../provider/ThemeProvider\";\r\n\r\ninterface ButtonProps extends TouchableWithoutFeedbackProps {\r\n  type?: keyof typeof type;\r\n  style?: ViewStyle;\r\n  color?: string;\r\n  outline?: boolean;\r\n  inverseColor?: string;\r\n  text?: string;\r\n  textStyle?: TextStyle;\r\n  size?: keyof typeof sizeProp;\r\n  outlineWidth?: number;\r\n  disabled?: boolean;\r\n  leftContent?: React.ReactNode;\r\n  rightContent?: React.ReactNode;\r\n  status?: \"primary\" | \"success\" | \"warning\" | \"info\" | \"danger\";\r\n  width?: number;\r\n}\r\n\r\ninterface ContentProps {\r\n  style?: ViewStyle;\r\n  color?: string;\r\n  outline?: boolean;\r\n  inverseColor?: string;\r\n  text?: string;\r\n  textStyle?: TextStyle;\r\n  size?: keyof typeof sizeProp;\r\n  outlineWidth?: number;\r\n  disabled?: boolean;\r\n  leftContent?: React.ReactNode;\r\n  rightContent?: React.ReactNode;\r\n  selectedColor?: any;\r\n  selectedInverseColor?: any;\r\n  status?: \"primary\" | \"success\" | \"warning\" | \"info\" | \"danger\";\r\n}\r\n\r\nenum sizeProp {\r\n  sm,\r\n  md,\r\n  lg, // default\r\n}\r\n\r\nconst type = {\r\n  TouchableOpacity: \"TouchableOpacity\", // default\r\n  TouchableWithoutFeedback: \"TouchableWithoutFeedback\",\r\n  TouchableHighlight: \"TouchableHighlight\",\r\n};\r\n\r\nconst parentStyle = {\r\n  buttonColor: themeColor.primary, // background color\r\n  buttonInverseColor: themeColor.white, // inversed background color\r\n  outlineWidth: 2,\r\n};\r\n\r\nconst styles = {\r\n  lg: {\r\n    ...parentStyle,\r\n    buttonBorderRadius: 8,\r\n    buttonPaddingVertical: 12.5,\r\n    buttonPaddingHorizontal: 15,\r\n    textSize: \"lg\",\r\n  },\r\n  md: {\r\n    ...parentStyle,\r\n    buttonBorderRadius: 8,\r\n    buttonPaddingVertical: 10,\r\n    buttonPaddingHorizontal: 12.5,\r\n    textSize: \"md\",\r\n  },\r\n  sm: {\r\n    ...parentStyle,\r\n    buttonBorderRadius: 8,\r\n    buttonPaddingVertical: 7.5,\r\n    buttonPaddingHorizontal: 12.5,\r\n    textSize: \"sm\",\r\n  },\r\n};\r\n\r\nconst ButtonContent: React.FC<ContentProps> = (props: ContentProps) => {\r\n  const {\r\n    text,\r\n    textStyle,\r\n    outline,\r\n    size,\r\n    leftContent,\r\n    rightContent,\r\n    selectedColor,\r\n    selectedInverseColor,\r\n    disabled,\r\n  } = props;\r\n  const { theme } = useTheme();\r\n  return (\r\n    <>\r\n      {leftContent}\r\n      <Text\r\n        style={{\r\n          ...textStyle,\r\n          color: textStyle?.color\r\n            ? textStyle?.color\r\n            : outline\r\n            ? selectedColor\r\n            : disabled\r\n            ? component[theme].button.disabledTextColor\r\n            : selectedInverseColor,\r\n          marginLeft: textStyle?.marginLeft\r\n            ? textStyle?.marginLeft\r\n            : leftContent\r\n            ? 5\r\n            : 0,\r\n          marginRight: textStyle?.marginRight\r\n            ? textStyle?.marginRight\r\n            : rightContent\r\n            ? 5\r\n            : 0,\r\n        }}\r\n        fontWeight=\"bold\"\r\n        size={size}\r\n      >\r\n        {text}\r\n      </Text>\r\n      {rightContent}\r\n    </>\r\n  );\r\n};\r\n\r\nconst Button: React.FC<ButtonProps> = (props: ButtonProps) => {\r\n  const {\r\n    text,\r\n    style,\r\n    textStyle,\r\n    outline,\r\n    color,\r\n    inverseColor,\r\n    size,\r\n    outlineWidth,\r\n    disabled,\r\n    leftContent,\r\n    rightContent,\r\n    status,\r\n    width,\r\n    ...buttonProp\r\n  } = props;\r\n  const { theme } = useTheme();\r\n  const selectedColor = disabled\r\n    ? component[theme].button.disabledColor\r\n    : color\r\n    ? color\r\n    : status\r\n    ? themeColor[status]\r\n    : styles[size || \"lg\"].buttonColor;\r\n\r\n  const selectedInverseColor = inverseColor\r\n    ? inverseColor\r\n    : status\r\n    ? themeColor.white\r\n    : styles[size || \"lg\"].buttonInverseColor;\r\n\r\n  const containerStyle = outline\r\n    ? {\r\n        borderWidth: outlineWidth || styles[size || \"lg\"].outlineWidth,\r\n        backgroundColor: outline ? \"transparent\" : selectedInverseColor,\r\n        borderColor: selectedColor,\r\n      }\r\n    : { backgroundColor: selectedColor };\r\n\r\n  const paddingHorizontal =\r\n    style?.paddingHorizontal || styles[size || \"lg\"].buttonPaddingHorizontal;\r\n\r\n  const paddingVertical = outline\r\n    ? styles[size || \"lg\"].buttonPaddingVertical -\r\n      styles[size || \"lg\"].outlineWidth\r\n    : style?.paddingVertical || styles[size || \"lg\"].buttonPaddingVertical;\r\n\r\n  const borderRadius =\r\n    style?.borderRadius || styles[size || \"lg\"].buttonBorderRadius;\r\n\r\n  if (props.type === \"TouchableWithoutFeedback\") {\r\n    return (\r\n      <TouchableWithoutFeedback {...buttonProp} disabled={disabled}>\r\n        <View\r\n          style={{\r\n            ...style,\r\n            ...containerStyle,\r\n            width: width,\r\n            flexDirection: \"row\",\r\n            paddingHorizontal: paddingHorizontal,\r\n            paddingVertical: paddingVertical,\r\n            borderRadius: borderRadius,\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <ButtonContent\r\n            {...props}\r\n            selectedColor={selectedColor}\r\n            selectedInverseColor={selectedInverseColor}\r\n          />\r\n        </View>\r\n      </TouchableWithoutFeedback>\r\n    );\r\n  }\r\n  if (props.type === \"TouchableHighlight\") {\r\n    return (\r\n      <TouchableHighlight\r\n        {...buttonProp}\r\n        disabled={disabled}\r\n        style={{\r\n          ...style,\r\n          ...containerStyle,\r\n          width: width,\r\n          flexDirection: \"row\",\r\n          paddingHorizontal: paddingHorizontal,\r\n          paddingVertical: paddingVertical,\r\n          borderRadius: borderRadius,\r\n          alignItems: \"center\",\r\n          justifyContent: \"center\",\r\n        }}\r\n      >\r\n        <ButtonContent\r\n          {...props}\r\n          selectedColor={selectedColor}\r\n          selectedInverseColor={selectedInverseColor}\r\n        />\r\n      </TouchableHighlight>\r\n    );\r\n  }\r\n  return (\r\n    <TouchableOpacity\r\n      {...buttonProp}\r\n      disabled={disabled}\r\n      style={{\r\n        ...style,\r\n        ...containerStyle,\r\n        width: width,\r\n        flexDirection: \"row\",\r\n        paddingHorizontal: paddingHorizontal,\r\n        paddingVertical: paddingVertical,\r\n        borderRadius: borderRadius,\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n      }}\r\n    >\r\n      <ButtonContent\r\n        {...props}\r\n        selectedColor={selectedColor}\r\n        selectedInverseColor={selectedInverseColor}\r\n      />\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n"]},"metadata":{},"sourceType":"module"}