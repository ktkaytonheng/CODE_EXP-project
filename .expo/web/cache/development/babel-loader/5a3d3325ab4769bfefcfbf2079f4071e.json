{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\CODE_EXP-project\\\\node_modules\\\\react-native-rapi-ui\\\\components\\\\Text\\\\Text.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { themeColor, component } from \"../../constants/colors\";\nimport { fontSize, normal, italic } from \"../../constants/typography\";\nimport { useTheme } from \"../../provider/ThemeProvider\";\n\nvar StyledText = function StyledText(props) {\n  var _props$style3, _props$style4;\n\n  var _useTheme = useTheme(),\n      theme = _useTheme.theme;\n\n  var font = function font() {\n    if (props.italic) {\n      if (props.fontWeight) {\n        return italic[props.fontWeight];\n      }\n\n      return italic.regular;\n    } else {\n      if (props.fontWeight) {\n        return normal[props.fontWeight];\n      }\n\n      return normal.regular;\n    }\n  };\n\n  var size = function size() {\n    var _props$style;\n\n    if ((_props$style = props.style) != null && _props$style.fontSize) {\n      var _props$style2;\n\n      return (_props$style2 = props.style) == null ? void 0 : _props$style2.fontSize;\n    } else {\n      return props.size ? fontSize[props.size] : fontSize.lg;\n    }\n  };\n\n  return React.createElement(Text, _extends({}, props, {\n    style: _objectSpread(_objectSpread({}, props.style), {}, {\n      fontFamily: font(),\n      fontSize: size(),\n      color: props.status ? themeColor[props.status] : (_props$style3 = props.style) != null && _props$style3.color ? (_props$style4 = props.style) == null ? void 0 : _props$style4.color : component[theme].text.color\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }));\n};\n\nexport default StyledText;","map":{"version":3,"sources":["C:/Users/User/Documents/GitHub/CODE_EXP-project/node_modules/react-native-rapi-ui/components/Text/Text.tsx"],"names":["React","themeColor","component","fontSize","normal","italic","useTheme","StyledText","props","theme","font","fontWeight","regular","size","style","lg","fontFamily","color","status","text"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,EAAqBC,SAArB;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,MAA3B;AACA,SAASC,QAAT;;AAUA,IAAMC,UAA2B,GAAG,SAA9BA,UAA8B,CAACC,KAAD,EAAkB;AAAA;;AACpD,kBAAkBF,QAAQ,EAA1B;AAAA,MAAQG,KAAR,aAAQA,KAAR;;AACA,MAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,QAAIF,KAAK,CAACH,MAAV,EAAkB;AAChB,UAAIG,KAAK,CAACG,UAAV,EAAsB;AACpB,eAAON,MAAM,CAACG,KAAK,CAACG,UAAP,CAAb;AACD;;AACD,aAAON,MAAM,CAACO,OAAd;AACD,KALD,MAKO;AACL,UAAIJ,KAAK,CAACG,UAAV,EAAsB;AACpB,eAAOP,MAAM,CAACI,KAAK,CAACG,UAAP,CAAb;AACD;;AACD,aAAOP,MAAM,CAACQ,OAAd;AACD;AACF,GAZD;;AAcA,MAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AACjB,wBAAIL,KAAK,CAACM,KAAV,aAAI,aAAaX,QAAjB,EAA2B;AAAA;;AACzB,8BAAOK,KAAK,CAACM,KAAb,qBAAO,cAAaX,QAApB;AACD,KAFD,MAEO;AACL,aAAOK,KAAK,CAACK,IAAN,GAAaV,QAAQ,CAACK,KAAK,CAACK,IAAP,CAArB,GAAoCV,QAAQ,CAACY,EAApD;AACD;AACF,GAND;;AAQA,SACE,oBAAC,IAAD,eACMP,KADN;AAEE,IAAA,KAAK,kCACAA,KAAK,CAACM,KADN;AAEHE,MAAAA,UAAU,EAAEN,IAAI,EAFb;AAGHP,MAAAA,QAAQ,EAAEU,IAAI,EAHX;AAIHI,MAAAA,KAAK,EAAET,KAAK,CAACU,MAAN,GACHjB,UAAU,CAACO,KAAK,CAACU,MAAP,CADP,GAEH,iBAAAV,KAAK,CAACM,KAAN,2BAAaG,KAAb,oBACAT,KAAK,CAACM,KADN,qBACA,cAAaG,KADb,GAEAf,SAAS,CAACO,KAAD,CAAT,CAAiBU,IAAjB,CAAsBF;AARvB,MAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAeD,CAvCD;;AAyCA,eAAeV,UAAf","sourcesContent":["import React from \"react\";\r\nimport { Text, TextProps, TextStyle } from \"react-native\";\r\nimport { themeColor, component } from \"../../constants/colors\";\r\nimport { fontSize, normal, italic } from \"../../constants/typography\";\r\nimport { useTheme } from \"../../provider/ThemeProvider\";\r\n\r\ninterface Props extends TextProps {\r\n  fontWeight?: keyof typeof normal;\r\n  italic?: boolean;\r\n  size?: keyof typeof fontSize;\r\n  style?: TextStyle;\r\n  status?: \"primary\" | \"success\" | \"warning\" | \"info\" | \"danger\";\r\n}\r\n\r\nconst StyledText: React.FC<Props> = (props: Props) => {\r\n  const { theme } = useTheme();\r\n  const font = () => {\r\n    if (props.italic) {\r\n      if (props.fontWeight) {\r\n        return italic[props.fontWeight];\r\n      }\r\n      return italic.regular;\r\n    } else {\r\n      if (props.fontWeight) {\r\n        return normal[props.fontWeight];\r\n      }\r\n      return normal.regular;\r\n    }\r\n  };\r\n\r\n  const size = () => {\r\n    if (props.style?.fontSize) {\r\n      return props.style?.fontSize;\r\n    } else {\r\n      return props.size ? fontSize[props.size] : fontSize.lg;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Text\r\n      {...props}\r\n      style={{\r\n        ...props.style,\r\n        fontFamily: font(),\r\n        fontSize: size(),\r\n        color: props.status\r\n          ? themeColor[props.status]\r\n          : props.style?.color\r\n          ? props.style?.color\r\n          : component[theme].text.color,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default StyledText;\r\n"]},"metadata":{},"sourceType":"module"}