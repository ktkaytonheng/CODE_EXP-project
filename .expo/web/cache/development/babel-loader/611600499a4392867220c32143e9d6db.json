{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\GitHub\\\\CODE_EXP-project\\\\node_modules\\\\react-native-rapi-ui\\\\components\\\\RadioButton\\\\RadioButton.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { component, themeColor } from \"../../constants/colors\";\nimport { useTheme } from \"../../provider/ThemeProvider\";\n\nvar RadioButton = function RadioButton(_ref) {\n  var _ref$value = _ref.value,\n      value = _ref$value === void 0 ? false : _ref$value,\n      onValueChange = _ref.onValueChange,\n      checkedColor = _ref.checkedColor,\n      uncheckedColor = _ref.uncheckedColor,\n      _ref$inverseColor = _ref.inverseColor,\n      inverseColor = _ref$inverseColor === void 0 ? themeColor.white : _ref$inverseColor,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      style = _ref.style;\n\n  var _useTheme = useTheme(),\n      theme = _useTheme.theme;\n\n  var selectedCheckedColor = checkedColor ? checkedColor : component[theme].checkBox.checkedColor;\n  var selectedUncheckedColor = uncheckedColor ? uncheckedColor : component[theme].checkBox.uncheckedColor;\n\n  var handleChange = function handleChange() {\n    if (onValueChange) {\n      onValueChange(!value);\n    }\n  };\n\n  return React.createElement(TouchableOpacity, {\n    onPress: handleChange,\n    style: _objectSpread(_objectSpread({}, style), {}, {\n      width: size,\n      height: size,\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      borderRadius: size / 2,\n      borderColor: value ? selectedCheckedColor : selectedUncheckedColor,\n      backgroundColor: disabled ? component[theme].checkBox.disabledColor : value ? selectedCheckedColor : \"transparent\",\n      borderWidth: 1\n    }),\n    disabled: disabled,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, value && React.createElement(View, {\n    style: {\n      width: size - 4,\n      height: size - 4,\n      borderRadius: (size - 4) / 2,\n      borderWidth: 4,\n      borderColor: disabled ? inverseColor : value ? inverseColor : selectedUncheckedColor,\n      backgroundColor: disabled ? component[theme].checkBox.disabledColor : value ? selectedCheckedColor : \"transparent\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default RadioButton;","map":{"version":3,"sources":["C:/Users/User/Documents/GitHub/CODE_EXP-project/node_modules/react-native-rapi-ui/components/RadioButton/RadioButton.tsx"],"names":["React","component","themeColor","useTheme","RadioButton","value","onValueChange","checkedColor","uncheckedColor","inverseColor","white","disabled","size","style","theme","selectedCheckedColor","checkBox","selectedUncheckedColor","handleChange","width","height","alignItems","justifyContent","borderRadius","borderColor","backgroundColor","disabledColor","borderWidth"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,SAAT,EAAoBC,UAApB;AACA,SAASC,QAAT;;AAaA,IAAMC,WAA4B,GAAG,SAA/BA,WAA+B,OAS/B;AAAA,wBARJC,KAQI;AAAA,MARJA,KAQI,2BARI,KAQJ;AAAA,MAPJC,aAOI,QAPJA,aAOI;AAAA,MANJC,YAMI,QANJA,YAMI;AAAA,MALJC,cAKI,QALJA,cAKI;AAAA,+BAJJC,YAII;AAAA,MAJJA,YAII,kCAJWP,UAAU,CAACQ,KAItB;AAAA,2BAHJC,QAGI;AAAA,MAHJA,QAGI,8BAHO,KAGP;AAAA,uBAFJC,IAEI;AAAA,MAFJA,IAEI,0BAFG,EAEH;AAAA,MADJC,KACI,QADJA,KACI;;AACJ,kBAAkBV,QAAQ,EAA1B;AAAA,MAAQW,KAAR,aAAQA,KAAR;;AACA,MAAMC,oBAAoB,GAAGR,YAAY,GACrCA,YADqC,GAErCN,SAAS,CAACa,KAAD,CAAT,CAAiBE,QAAjB,CAA0BT,YAF9B;AAGA,MAAMU,sBAAsB,GAAGT,cAAc,GACzCA,cADyC,GAEzCP,SAAS,CAACa,KAAD,CAAT,CAAiBE,QAAjB,CAA0BR,cAF9B;;AAGA,MAAMU,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,QAAIZ,aAAJ,EAAmB;AACjBA,MAAAA,aAAa,CAAC,CAACD,KAAF,CAAb;AACD;AACF,GAJD;;AAMA,SACE,oBAAC,gBAAD;AACE,IAAA,OAAO,EAAEa,YADX;AAEE,IAAA,KAAK,kCACAL,KADA;AAEHM,MAAAA,KAAK,EAAEP,IAFJ;AAGHQ,MAAAA,MAAM,EAAER,IAHL;AAIHS,MAAAA,UAAU,EAAE,QAJT;AAKHC,MAAAA,cAAc,EAAE,QALb;AAMHC,MAAAA,YAAY,EAAEX,IAAI,GAAG,CANlB;AAOHY,MAAAA,WAAW,EAAEnB,KAAK,GAAGU,oBAAH,GAA0BE,sBAPzC;AAQHQ,MAAAA,eAAe,EAAEd,QAAQ,GACrBV,SAAS,CAACa,KAAD,CAAT,CAAiBE,QAAjB,CAA0BU,aADL,GAErBrB,KAAK,GACLU,oBADK,GAEL,aAZD;AAaHY,MAAAA,WAAW,EAAE;AAbV,MAFP;AAiBE,IAAA,QAAQ,EAAEhB,QAjBZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAmBGN,KAAK,IACJ,oBAAC,IAAD;AACE,IAAA,KAAK,EAAE;AACLc,MAAAA,KAAK,EAAEP,IAAI,GAAG,CADT;AAELQ,MAAAA,MAAM,EAAER,IAAI,GAAG,CAFV;AAGLW,MAAAA,YAAY,EAAE,CAACX,IAAI,GAAG,CAAR,IAAa,CAHtB;AAILe,MAAAA,WAAW,EAAE,CAJR;AAKLH,MAAAA,WAAW,EAAEb,QAAQ,GACjBF,YADiB,GAEjBJ,KAAK,GACLI,YADK,GAELQ,sBATC;AAULQ,MAAAA,eAAe,EAAEd,QAAQ,GACrBV,SAAS,CAACa,KAAD,CAAT,CAAiBE,QAAjB,CAA0BU,aADL,GAErBrB,KAAK,GACLU,oBADK,GAEL;AAdC,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBJ,CADF;AA0CD,CAjED;;AAmEA,eAAeX,WAAf","sourcesContent":["import React from \"react\";\r\nimport { ColorValue, TouchableOpacity, View, ViewStyle } from \"react-native\";\r\nimport { component, themeColor } from \"../../constants/colors\";\r\nimport { useTheme } from \"../../provider/ThemeProvider\";\r\n\r\ninterface Props {\r\n  value: boolean;\r\n  onValueChange?: (newValue: boolean) => void;\r\n  checkedColor?: ColorValue;\r\n  uncheckedColor?: ColorValue;\r\n  inverseColor?: ColorValue;\r\n  disabled?: boolean;\r\n  style?: ViewStyle;\r\n  size?: number;\r\n}\r\n\r\nconst RadioButton: React.FC<Props> = ({\r\n  value = false,\r\n  onValueChange,\r\n  checkedColor,\r\n  uncheckedColor,\r\n  inverseColor = themeColor.white,\r\n  disabled = false,\r\n  size = 24,\r\n  style,\r\n}) => {\r\n  const { theme } = useTheme();\r\n  const selectedCheckedColor = checkedColor\r\n    ? checkedColor\r\n    : component[theme].checkBox.checkedColor;\r\n  const selectedUncheckedColor = uncheckedColor\r\n    ? uncheckedColor\r\n    : component[theme].checkBox.uncheckedColor;\r\n  const handleChange = () => {\r\n    if (onValueChange) {\r\n      onValueChange(!value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TouchableOpacity\r\n      onPress={handleChange}\r\n      style={{\r\n        ...style,\r\n        width: size,\r\n        height: size,\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        borderRadius: size / 2,\r\n        borderColor: value ? selectedCheckedColor : selectedUncheckedColor,\r\n        backgroundColor: disabled\r\n          ? component[theme].checkBox.disabledColor\r\n          : value\r\n          ? selectedCheckedColor\r\n          : \"transparent\",\r\n        borderWidth: 1,\r\n      }}\r\n      disabled={disabled}\r\n    >\r\n      {value && (\r\n        <View\r\n          style={{\r\n            width: size - 4,\r\n            height: size - 4,\r\n            borderRadius: (size - 4) / 2,\r\n            borderWidth: 4,\r\n            borderColor: disabled\r\n              ? inverseColor\r\n              : value\r\n              ? inverseColor\r\n              : selectedUncheckedColor,\r\n            backgroundColor: disabled\r\n              ? component[theme].checkBox.disabledColor\r\n              : value\r\n              ? selectedCheckedColor\r\n              : \"transparent\",\r\n          }}\r\n        />\r\n      )}\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nexport default RadioButton;\r\n"]},"metadata":{},"sourceType":"module"}